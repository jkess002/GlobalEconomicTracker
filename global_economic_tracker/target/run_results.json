{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.4", "generated_at": "2025-04-11T03:12:12.406154Z", "invocation_id": "8e0acfcd-0069-4092-bd9d-ad442adebab8", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.753914Z", "completed_at": "2025-04-11T03:12:11.764261Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.765016Z", "completed_at": "2025-04-11T03:12:11.860495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11193203926086426, "adapter_response": {"_message": "SELECT 517", "code": "SELECT", "rows_affected": 517}, "message": "SELECT 517", "failures": null, "unique_id": "model.global_economic_tracker.stg_commodity_returns", "compiled": true, "compiled_code": "\n\nselect\n    'commodity' as type,\n    ticker,\n    timestamp,\n    price,\n    lag(price) over (partition by ticker order by timestamp) as prev_price,\n    coalesce((price - lag(price) over (partition by ticker order by timestamp)) / lag(price) over (partition by ticker order by timestamp), 0) as daily_return\nfrom public.commodity_prices", "relation_name": "\"airflow\".\"public\".\"stg_commodity_returns\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.758339Z", "completed_at": "2025-04-11T03:12:11.770398Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.784943Z", "completed_at": "2025-04-11T03:12:11.861694Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1124117374420166, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.global_economic_tracker.stg_index_returns", "compiled": true, "compiled_code": "\n\nselect\n    'index' as type,\n    country,\n    ticker,\n    timestamp,\n    price,\n    lag(price) over (partition by ticker order by timestamp) as prev_price,\n    coalesce((price - lag(price) over (partition by ticker order by timestamp)) / lag(price) over (partition by ticker order by timestamp), 0) as daily_return\nfrom public.index_prices", "relation_name": "\"airflow\".\"public\".\"stg_index_returns\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.889667Z", "completed_at": "2025-04-11T03:12:11.903034Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.909263Z", "completed_at": "2025-04-11T03:12:11.934680Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0664360523223877, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_commodity_returns_timestamp.db78c2b359", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom \"airflow\".\"public\".\"stg_commodity_returns\"\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.882550Z", "completed_at": "2025-04-11T03:12:11.902797Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.907539Z", "completed_at": "2025-04-11T03:12:11.936755Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06934833526611328, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_commodity_returns_daily_return.4aee50d934", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect daily_return\nfrom \"airflow\".\"public\".\"stg_commodity_returns\"\nwhere daily_return is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.887046Z", "completed_at": "2025-04-11T03:12:11.897091Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.905531Z", "completed_at": "2025-04-11T03:12:11.939285Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07093167304992676, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_commodity_returns_ticker.667685f78d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticker\nfrom \"airflow\".\"public\".\"stg_commodity_returns\"\nwhere ticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.879274Z", "completed_at": "2025-04-11T03:12:11.896519Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.897662Z", "completed_at": "2025-04-11T03:12:11.941118Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07391977310180664, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_commodity_returns_daily_return__0_5___0_5.d73ca1f9fe", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_commodity_returns\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return >= -0.5\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return <= 0.5\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.959528Z", "completed_at": "2025-04-11T03:12:11.973002Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.974513Z", "completed_at": "2025-04-11T03:12:12.003080Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05683159828186035, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_index_returns_daily_return__0_5___0_5.634bf70713", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_index_returns\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return >= -0.5\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return <= 0.5\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.962976Z", "completed_at": "2025-04-11T03:12:11.973902Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.976412Z", "completed_at": "2025-04-11T03:12:12.005174Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.056818485260009766, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_index_returns_daily_return.19ad6938b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect daily_return\nfrom \"airflow\".\"public\".\"stg_index_returns\"\nwhere daily_return is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.966746Z", "completed_at": "2025-04-11T03:12:11.976155Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.978720Z", "completed_at": "2025-04-11T03:12:12.007927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05661177635192871, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_index_returns_ticker.acc6892ae0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticker\nfrom \"airflow\".\"public\".\"stg_index_returns\"\nwhere ticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:11.969807Z", "completed_at": "2025-04-11T03:12:11.978149Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:11.980962Z", "completed_at": "2025-04-11T03:12:12.009710Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.057022809982299805, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_index_returns_timestamp.4f8a428b17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom \"airflow\".\"public\".\"stg_index_returns\"\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.024637Z", "completed_at": "2025-04-11T03:12:12.033370Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.034100Z", "completed_at": "2025-04-11T03:12:12.126295Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1055002212524414, "adapter_response": {"_message": "SELECT 517", "code": "SELECT", "rows_affected": 517}, "message": "SELECT 517", "failures": null, "unique_id": "model.global_economic_tracker.stg_commodity_metrics", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        *,\n        row_number() over (partition by ticker order by timestamp) as rn\n    from \"airflow\".\"public\".\"stg_commodity_returns\"\n),\n\nrolling as (\n    select\n        ticker,\n        timestamp,\n        avg(daily_return) over (\n            partition by ticker\n            order by rn\n            rows between 19 preceding and current row\n        ) as rolling_avg_mo,\n\n        avg(daily_return) OVER (\n            partition by ticker\n            order by timestamp\n            rows between 6 preceding and current row\n        ) as weekly_avg_return,\n\n        stddev(daily_return) over (\n            partition by ticker\n            order by rn\n            rows between 19 preceding and current row\n        ) as rolling_volatility_mo,\n\n        case\n            when daily_return > 0 then 'up'\n            when daily_return < 0 then 'down'\n            else 'flat'\n        end as trend,\n\n        daily_return\n\n    from base\n)\n\nselect\n    *,\n    rolling_avg_mo / nullif(rolling_volatility_mo, 0) as sharpe_mo,\n    (daily_return - rolling_avg_mo) / nullif(rolling_volatility_mo, 0) as z_score_mo\nfrom rolling\nwhere rolling_avg_mo is not null", "relation_name": "\"airflow\".\"public\".\"stg_commodity_metrics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.028141Z", "completed_at": "2025-04-11T03:12:12.036408Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.037507Z", "completed_at": "2025-04-11T03:12:12.128238Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10607099533081055, "adapter_response": {"_message": "SELECT 0", "code": "SELECT", "rows_affected": 0}, "message": "SELECT 0", "failures": null, "unique_id": "model.global_economic_tracker.stg_index_metrics", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        *,\n        row_number() over (partition by ticker order by timestamp) as rn\n    from \"airflow\".\"public\".\"stg_index_returns\"\n),\n\nrolling as (\n    select\n        ticker,\n        timestamp,\n        avg(daily_return) over (\n            partition by ticker\n            order by rn\n            rows between 19 preceding and current row\n        ) as rolling_avg_mo,\n\n        avg(daily_return) OVER (\n            partition by ticker\n            order by timestamp\n            rows between 6 preceding and current row\n        ) as weekly_avg_return,\n\n        stddev(daily_return) over (\n            partition by ticker\n            order by rn\n            rows between 19 preceding and current row\n        ) as rolling_volatility_mo,\n\n        case\n            when daily_return > 0 then 'up'\n            when daily_return < 0 then 'down'\n            else 'flat'\n        end as trend,\n\n        daily_return\n\n    from base\n)\n\nselect\n    *,\n    rolling_avg_mo / nullif(rolling_volatility_mo, 0) as sharpe_mo,\n    (daily_return - rolling_avg_mo) / nullif(rolling_volatility_mo, 0) as z_score_mo\nfrom rolling\nwhere rolling_avg_mo is not null", "relation_name": "\"airflow\".\"public\".\"stg_index_metrics\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.149179Z", "completed_at": "2025-04-11T03:12:12.161366Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.162359Z", "completed_at": "2025-04-11T03:12:12.193341Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06154942512512207, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_commodity_metrics_rolling_avg_mo__0_3___0_3.22c9d514f7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_commodity_metrics\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not rolling_avg_mo >= -0.3\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not rolling_avg_mo <= 0.3\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.154311Z", "completed_at": "2025-04-11T03:12:12.163806Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.168214Z", "completed_at": "2025-04-11T03:12:12.195316Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05911397933959961, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_commodity_metrics_sharpe_mo__2___2.d118d6bf26", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_commodity_metrics\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not sharpe_mo >= -2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not sharpe_mo <= 2\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.143546Z", "completed_at": "2025-04-11T03:12:12.163575Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.166580Z", "completed_at": "2025-04-11T03:12:12.196478Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06514334678649902, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.accepted_values_stg_commodity_metrics_trend__up__down__flat.70479897b5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        trend as value_field,\n        count(*) as n_records\n\n    from \"airflow\".\"public\".\"stg_commodity_metrics\"\n    group by trend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'up','down','flat'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.146306Z", "completed_at": "2025-04-11T03:12:12.161625Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.164377Z", "completed_at": "2025-04-11T03:12:12.198291Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06626343727111816, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_commodity_metrics_daily_return__0_5___0_5.2c4246e1e4", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_commodity_metrics\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return >= -0.5\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return <= 0.5\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.218992Z", "completed_at": "2025-04-11T03:12:12.234992Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.236159Z", "completed_at": "2025-04-11T03:12:12.265799Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.059354305267333984, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_commodity_metrics_daily_return.74b14cc336", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect daily_return\nfrom \"airflow\".\"public\".\"stg_commodity_metrics\"\nwhere daily_return is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.228804Z", "completed_at": "2025-04-11T03:12:12.235576Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.238284Z", "completed_at": "2025-04-11T03:12:12.269142Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05935239791870117, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.accepted_values_stg_index_metrics_trend__up__down__flat.1fea418295", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        trend as value_field,\n        count(*) as n_records\n\n    from \"airflow\".\"public\".\"stg_index_metrics\"\n    group by trend\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'up','down','flat'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.222410Z", "completed_at": "2025-04-11T03:12:12.237476Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.240518Z", "completed_at": "2025-04-11T03:12:12.271375Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06310319900512695, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_commodity_metrics_ticker.6d1d8d12d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticker\nfrom \"airflow\".\"public\".\"stg_commodity_metrics\"\nwhere ticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.225667Z", "completed_at": "2025-04-11T03:12:12.237710Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.242185Z", "completed_at": "2025-04-11T03:12:12.273984Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06465578079223633, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_commodity_metrics_timestamp.5651d4b196", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom \"airflow\".\"public\".\"stg_commodity_metrics\"\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.290360Z", "completed_at": "2025-04-11T03:12:12.302702Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.306664Z", "completed_at": "2025-04-11T03:12:12.334875Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05665159225463867, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_index_metrics_daily_return__0_5___0_5.6e9f33b0a2", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_index_metrics\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return >= -0.5\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not daily_return <= 0.5\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.296575Z", "completed_at": "2025-04-11T03:12:12.309348Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.310277Z", "completed_at": "2025-04-11T03:12:12.336727Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05434894561767578, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_index_metrics_rolling_avg_mo__0_3___0_3.13a5241921", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_index_metrics\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not rolling_avg_mo >= -0.3\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not rolling_avg_mo <= 0.3\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.300052Z", "completed_at": "2025-04-11T03:12:12.309875Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.312933Z", "completed_at": "2025-04-11T03:12:12.340145Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05662679672241211, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.dbt_utils_accepted_range_stg_index_metrics_sharpe_mo__2___2.5a4a583bdc", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"airflow\".\"public\".\"stg_index_metrics\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not sharpe_mo >= -2\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not sharpe_mo <= 2\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.303369Z", "completed_at": "2025-04-11T03:12:12.314036Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.316145Z", "completed_at": "2025-04-11T03:12:12.348016Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05961918830871582, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_index_metrics_daily_return.26f4856193", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect daily_return\nfrom \"airflow\".\"public\".\"stg_index_metrics\"\nwhere daily_return is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.357605Z", "completed_at": "2025-04-11T03:12:12.367161Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.367900Z", "completed_at": "2025-04-11T03:12:12.385218Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03570151329040527, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_index_metrics_ticker.4b922607c9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticker\nfrom \"airflow\".\"public\".\"stg_index_metrics\"\nwhere ticker is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-04-11T03:12:12.360752Z", "completed_at": "2025-04-11T03:12:12.369072Z"}, {"name": "execute", "started_at": "2025-04-11T03:12:12.370135Z", "completed_at": "2025-04-11T03:12:12.387700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03618121147155762, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": null, "failures": 0, "unique_id": "test.global_economic_tracker.not_null_stg_index_metrics_timestamp.b1d1abca86", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect timestamp\nfrom \"airflow\".\"public\".\"stg_index_metrics\"\nwhere timestamp is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 0.7177186012268066, "args": {"write_json": true, "require_explicit_package_overrides_for_builtin_materializations": true, "export_saved_queries": false, "defer": false, "exclude_resource_types": [], "log_format": "default", "exclude": [], "use_colors_file": true, "include_saved_query": false, "warn_error_options": {"include": [], "exclude": []}, "partial_parse_file_diff": true, "cache_selected_only": false, "version_check": true, "indirect_selection": "eager", "project_dir": "/mnt/c/Users/joeyk/PycharmProjects/GlobalEconomicTracker/global_economic_tracker", "log_file_max_bytes": 10485760, "show_resource_report": false, "show": false, "profiles_dir": "/home/joey/.dbt", "static_parser": true, "printer_width": 80, "introspect": true, "invocation_command": "dbt build", "quiet": false, "print": true, "strict_mode": false, "select": [], "macro_debugging": false, "skip_nodes_if_on_run_start_fails": false, "favor_state": false, "log_path": "/mnt/c/Users/joeyk/PycharmProjects/GlobalEconomicTracker/global_economic_tracker/logs", "use_colors": true, "require_yaml_configuration_for_mf_time_spines": false, "state_modified_compare_vars": false, "send_anonymous_usage_stats": true, "vars": {}, "which": "build", "require_batched_execution_for_custom_microbatch_strategy": false, "empty": false, "log_format_file": "debug", "log_level_file": "debug", "require_resource_names_without_spaces": false, "partial_parse": true, "require_nested_cumulative_type_params": false, "source_freshness_run_project_hooks": false, "resource_types": [], "state_modified_compare_more_unrendered_values": false, "populate_cache": true, "log_level": "info"}}